services:
  # === NGINX REVERSE PROXY ===
  nginx:
    image: nginx:alpine
    container_name: nginx-reverse-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - authorization
      - snippet-engine
      - snippet-service
    networks:
      - group6-gudelker-network
    restart: unless-stopped
  # === SNIPPET ENGINE ===
  snippet-engine-db:
    image: postgres:16
    container_name: snippet-engine-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER_ENGINE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_ENGINE}
      POSTGRES_DB: ${POSTGRES_DB_ENGINE}
    ports:
      - 5433:5432
    volumes:
      - snippet_engine_data:/var/lib/postgresql/data
    networks:
      - group6-gudelker-network
    restart: unless-stopped

  snippet-engine:
    image: ${SNIPPET_ENGINE_IMAGE}
    platform: linux/amd64
    container_name: snippet-engine
    depends_on:
      - snippet-engine-db
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_ENGINE}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME_ENGINE}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD_ENGINE}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
    expose:
      - "8080"
    networks:
      - group6-gudelker-network
    restart: unless-stopped

  snippet-service-db:
    image: postgres:16
    container_name: snippet-service-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER_SERVICE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_SERVICE}
      POSTGRES_DB: ${POSTGRES_DB_SERVICE}
    ports:
      - 5434:5432
    volumes:
      - snippet_service_data:/var/lib/postgresql/data
    networks:
      - group6-gudelker-network
    restart: unless-stopped

  snippet-service:
    image: ${SNIPPET_SERVICE_IMAGE}
    platform: linux/amd64
    container_name: snippet-service
    depends_on:
      - snippet-service-db
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_SERVICE}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME_SERVICE}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD_SERVICE}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_TOKEN_URL: ${AUTH0_TOKEN_URL}
    expose:
      - "8080"
    networks:
      - group6-gudelker-network
    restart: unless-stopped

  authorization-db:
    image: postgres:16
    container_name: authorization-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER_AUTHORIZATION}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_AUTHORIZATION}
      POSTGRES_DB: ${POSTGRES_DB_AUTHORIZATION}
    ports:
      - 5432:5432
    volumes:
      - authorization_data:/var/lib/postgresql/data
    networks:
      - group6-gudelker-network
    restart: unless-stopped

  authorization:
    image: ${AUTH_SERVICE_IMAGE}
    platform: linux/amd64
    container_name: authorization
    depends_on:
      - authorization-db
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_AUTHORIZATION}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME_AUTHORIZATION}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD_AUTHORIZATION}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
    expose:
      - "8080"
    networks:
      - group6-gudelker-network
    restart: unless-stopped

  asset-service:
      container_name: asset-service
      image: ghcr.io/austral-ingsis/snippet-asset-service:main.14
      expose:
        - "8080"
      environment:
        AZURE_HOST: "http://azurite"
        NEW_RELIC_APP_NAME: "asset-service"
        NEW_RELIC_AGENT_ENABLED: false
      depends_on:
        - azurite
      networks:
        - group6-gudelker-network
      restart: unless-stopped

  azurite:
      image: mcr.microsoft.com/azure-storage/azurite
      container_name: azurite
      hostname: azurite
      restart: always
      ports:
        - "10000:10000"
        - "10001:10001"
        - "10002:10002"
      volumes:
        - blob:/workspace
      networks:
        - group6-gudelker-network

volumes:
  snippet_engine_data:
  snippet_service_data:
  authorization_data:
  blob:
      external: false

networks:
  group6-gudelker-network:
